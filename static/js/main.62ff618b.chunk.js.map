{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","id","name","email","className","alt","src","CardList","cardsArray","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","children","style","overflow","border","height","ErrorBoundry","state","hasError","error","info","this","setState","hasEror","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAiBeA,EAfF,SAACC,GACZ,IAAQC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAClB,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,GAAGC,IAAG,+BAA0BL,EAA1B,cACf,6BACE,4BAAKC,GACL,2BAAIC,MCMGI,EAZE,SAAC,GAAgB,IAC1BC,EADyB,EAAbC,OACQC,KAAI,SAACC,EAAMC,GAInC,OACE,kBAAC,EAAD,CAAMC,IAAKF,EAAKV,GAAIA,GAAIU,EAAKV,GAAIC,KAAMS,EAAKT,KAAMC,MAAOQ,EAAKR,WAGlE,OAAO,oCAAGK,ICGGM,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKZ,UAAU,OACb,2BACEA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCSHI,EAhBA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OAGE,yBACEC,MAAO,CACLC,SAAU,SACVC,OAAQ,kBACRC,OAAQ,UAGTJ,ICcQK,E,kDAtBb,WAAY1B,GAAQ,IAAD,8BACjB,cAAMA,IACD2B,MAAQ,CACXC,UAAU,GAHK,E,qDASnB,SAAkBC,EAAOC,GACvBC,KAAKC,SAAS,CAAEC,SAAS,M,oBAG3B,WACE,OAAOF,KAAKJ,MAAMC,SAChB,wDAEAG,KAAK/B,MAAMqB,a,GAlBUa,aCsDZC,G,wDAjDb,WAAYnC,GAAQ,IAAD,8BACjB,cAAMA,IAqBRoC,eAAiB,SAACC,GAChB,EAAKL,SAAS,CAAEjB,YAAasB,EAAMC,OAAOC,SArB1C,EAAKZ,MAAQ,CACXlB,OAAQ,GACRM,YAAa,IAJE,E,qDAWnB,WAAqB,IAAD,OAElByB,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKZ,SAAS,CAAEvB,OAAQmC,S,oBAU9B,WACE,MAAgCb,KAAKJ,MAA7BlB,EAAR,EAAQA,OAAQM,EAAhB,EAAgBA,YACV8B,EAAiBpC,EAAOqC,QAAO,SAACC,GACpC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASlC,EAAYiC,kBAIvD,OAAQvC,EAAOyC,OAGb,yBAAK9C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAce,KAAKK,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,OAAQoC,IADpB,OANJ,wBAAIzC,UAAU,MAAd,kB,GAnCY8B,cCIHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,6BACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.62ff618b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = (props) => {\n  const { id, name, email } = props;\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"\" src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n// You can do\n// const Card = ({name, email, id}) =>\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  const cardsArray = robots.map((user, i) => {\n    // Key helps react with reusability,\n    // so that it only renders what changes in the webpage\n    // and not the entire DOM\n    return (\n      <Card key={user.id} id={user.id} name={user.name} email={user.email} />\n    );\n  });\n  return <>{cardsArray}</>;\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = ({ children }) => {\n  return (\n    // In JSX you can add CSS inline styles\n    // using double brackets\n    <div\n      style={{\n        overflow: \"scroll\",\n        border: \"1px solid black\",\n        height: \"100vh\",\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\n// This component will catch any error\n// and display something alternative\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  // lifecycle hook\n  // if anythin errors out, it will run this lifecycle hook\n  componentDidCatch(error, info) {\n    this.setState({ hasEror: true });\n  }\n\n  render() {\n    return this.state.hasError ? (\n      <h1>Oooops. That is not good</h1>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\n// import { robots } from \"./robots\";\nimport \"./app.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      robots: [],\n      searchField: \"\",\n    };\n  }\n\n  // This will run after the component is rendered\n  // In this case: constructor -> render -> componentDidMount -> render\n  // Render runs again because componentDidMount changed the state\n  componentDidMount() {\n    // fetch is a method on the window object\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => {\n        this.setState({ robots: users });\n      });\n  }\n\n  // using arrow functions ensures that \"this\"\n  // refers to the component where the function was created\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { robots, searchField } = this.state;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    // if just in case the app takes longer to load\n    return !robots.length ? (\n      <h1 className=\"tc\">Loading...</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />;\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}